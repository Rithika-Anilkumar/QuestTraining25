CREATE TABLE Suppliers (
    id INT PRIMARY KEY IDENTITY,
    name VARCHAR(100) NOT NULL,
    contact_person VARCHAR(100),
    phone VARCHAR(20),
    email VARCHAR(100) UNIQUE,
    address VARCHAR(255)
);

CREATE TABLE Medications (
    id INT PRIMARY KEY IDENTITY,
    name VARCHAR(100) NOT NULL,
    category VARCHAR(50),
    price DECIMAL(10,2) NOT NULL CHECK (price >= 0),
    expiry_date DATE,
    supplier_id INT,
    stock_quantity INT DEFAULT 0 CHECK (stock_quantity >= 0),
    FOREIGN KEY (supplier_id) REFERENCES Suppliers(id)
);

CREATE TABLE Customers (
    id INT PRIMARY KEY IDENTITY,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    email VARCHAR(100) UNIQUE,
    address VARCHAR(255)
);

CREATE TABLE Sales (
    id INT PRIMARY KEY IDENTITY,
    customer_id INT,
    medication_id INT,
    quantity INT NOT NULL CHECK (quantity > 0),
    sale_date DATETIME DEFAULT GETDATE(),
    total_price DECIMAL(10,2) NOT NULL CHECK (total_price >= 0),
    FOREIGN KEY (customer_id) REFERENCES Customers(id),
    FOREIGN KEY (medication_id) REFERENCES Medications(id)
);

CREATE TABLE Inventory (
    id INT PRIMARY KEY IDENTITY,
    medication_id INT,
    supplier_id INT,
    stock_in INT DEFAULT 0 CHECK (stock_in >= 0),
    stock_out INT DEFAULT 0 CHECK (stock_out >= 0),
    date_added DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (medication_id) REFERENCES Medications(id),
    FOREIGN KEY (supplier_id) REFERENCES Suppliers(id)
);

CREATE PROCEDURE AddMedication (
    @name VARCHAR(100),
    @category VARCHAR(50),
    @price DECIMAL(10, 2),
    @expiry_date DATE,
    @supplier_id INT,
    @stock_quantity INT
)
AS
BEGIN
    INSERT INTO Medications (name, category, price, expiry_date, supplier_id, stock_quantity)
    VALUES (@name, @category, @price, @expiry_date, @supplier_id, @stock_quantity);
END;

EXEC AddMedication 
    @name = 'Paracetamol', 
    @category = 'Pain Relief', 
    @price = 2.50, 
    @expiry_date = '2025-12-31', 
    @supplier_id = 1, 
    @stock_quantity = 100;



CREATE PROCEDURE AddSupplier (
    @name VARCHAR(50),
    @contact_person VARCHAR(50),
   
    @email VARCHAR(50),
    @address VARCHAR(50)
)
AS
BEGIN
    INSERT INTO Suppliers (name, contact_person,  email, address)
    VALUES (@name, @contact_person, @email, @address);
END;

EXEC AddSupplier 
    @name = 'HealthCorp', 
    @contact_person = 'Jane Smith', 
    @email = 'info@healthcorp.com', 
    @address = '123 Health Street';



CREATE PROCEDURE AddCustomer (
    @name VARCHAR(100),
    @phone VARCHAR(20),
    @email VARCHAR(100),
    @address VARCHAR(255)
)
AS
BEGIN
    
    INSERT INTO Customers (name, phone, email, address)
    VALUES (@name, @phone, @email, @address);
END;
EXEC AddCustomer
    @name = 'John Doe',
    @phone = '9876543210',
    @email = 'john.doe@example.com',
    @address = '456 Elm Street, Springfield';


UPDATE Medications
SET stock_quantity = stock_quantity + 50
WHERE name = 'Paracetamol';

-- JOIN query to list all medications and their corresponding supplier names.

SELECT Medications.name AS Medication_Name, Suppliers.name AS Supplier_Name
FROM Medications
JOIN Suppliers ON Medications.supplier_id = Suppliers.id;

-- to display the sales data, including the medication name, customer name, and the total amount of the sale.

SELECT Sales.id, Customers.name AS Customer_Name, Medications.name AS Medication_Name, Sales.total_price
FROM Sales
JOIN Customers ON Sales.customer_id = Customers.id
JOIN Medications ON Sales.medication_id =Â Medications.id;