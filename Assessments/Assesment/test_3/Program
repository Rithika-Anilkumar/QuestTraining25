using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Remoting.Contexts;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using test3.Models;

namespace test3
{
    internal class Program
    {
        private static INoteRepository _noteRepository;
        static void Main(string[] args)
        {
            string connectionString = @"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\Users\Dell\Documents\NoteTakingApp.mdf;Integrated Security=True";
            _noteRepository = new NoteRepository(connectionString);
            while (true)
            {
                Console.WriteLine("NoteTakingApplication");
                Console.WriteLine("1. Create a new note");
                Console.WriteLine("2. View all notes");
                Console.WriteLine("3. Update an existing note");
                Console.WriteLine("4. Delete a note");
                Console.WriteLine("5. Exit");
                Console.Write("Choose an option: ");
                string choice = Console.ReadLine();
                switch (choice)
                {
                    case "1":
                        CreateNote();
                        break;

                    case "2":
                        ViewAllNotes();
                        break;

                    case "3":
                        UpdateNote();
                        break;

                    case "4":
                        DeleteNote();
                        break;

                    case "5":
                        Console.WriteLine("Exit");
                        break;

                    default:
                        Console.WriteLine("Invalid option. Please try again.");
                        break;
                }
            }
        }
        private static void CreateNote()
        {
            Console.Write("Enter note title: ");
            string title = Console.ReadLine();
            Console.Write("Enter note content: ");
            string content = Console.ReadLine();
            if (string.IsNullOrEmpty(title) || string.IsNullOrEmpty(content))
            {
                Console.WriteLine("Title and content cannot be empty.");
                return;
            }
            Note newNote = new Note
            {
                Title = title,
                Content = content,
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now
            };

            _noteRepository.Add(newNote);
            
        }
        private static void ViewAllNotes()
        {
            var notes = _noteRepository.Display();
            foreach (var note in notes)
            {
                Console.WriteLine($"{note.Id}: {note.Title} (Created: {note.CreatedAt})");
            }
        }

        private static void UpdateNote()
        {
            Console.Write("Enter note ID to update: ");
            int id = int.Parse(Console.ReadLine());
            Note noteToUpdate = _noteRepository.GetById(id);
            if (noteToUpdate == null)
            {
                Console.WriteLine("Note not found.");
                return;
            }
            Console.Write("Enter new title: ");
            string newTitle = Console.ReadLine();
            noteToUpdate.Title = newTitle;
            Console.Write("Enter new content: ");
            string newContent = Console.ReadLine();
            noteToUpdate.Content = newContent;
            noteToUpdate.UpdatedAt = DateTime.Now;
            _noteRepository.Update(noteToUpdate);
            
        }

        private static void DeleteNote()
        {
            Console.Write("Enter note ID to delete: ");
            int id = int.Parse(Console.ReadLine());
            _noteRepository.Delete(id);
            
        }
    }
}