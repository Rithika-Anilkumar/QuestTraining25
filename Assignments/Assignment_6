Types of SQL Queries
SQL (Structured Query Language) categorizes queries based on their functionality. Understanding these types helps in effectively managing and manipulating databases.

// DML (Data Manipulation Language)
Purpose: Manipulate data within existing database objects.
Commands:
SELECT: Retrieve data from one or more tables.
INSERT: Add new records to a table.
UPDATE: Modify existing records.
DELETE: Remove records from a table.
Example:
INSERT INTO STUDENT (StudentName, Email) VALUES ('Alice', 'alice@example.com');


// DDL (Data Definition Language)
Purpose: Define and manage all structures in a database.
Commands:
CREATE: Create new database objects (tables, views, indexes).
ALTER: Modify existing database objects.
DROP: Delete database objects.
TRUNCATE: Remove all records from a table without deleting the table itself.
Example:
CREATE TABLE COURSE (
    CourseId INT PRIMARY KEY,
    CourseName VARCHAR(100)
);


// DCL (Data Control Language)
Purpose: Control access to data within the database.
Commands:
GRANT: Provide privileges to users.
REVOKE: Remove privileges from users.
Example:
GRANT SELECT, INSERT ON STUDENT TO user_name;


// TCL (Transaction Control Language)
Purpose: Manage transactions to ensure data integrity.
Commands:
COMMIT: Save all changes made in the current transaction.
ROLLBACK: Undo changes since the last commit.
SAVEPOINT: Set a point within a transaction to which you can later roll back.
SET TRANSACTION: Define characteristics for the transaction.
Example:
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'newemail@example.com' WHERE StudentId = 1;
COMMIT;


// DQL (Data Query Language)
Purpose: Query data from the database.
Commands:
Primarily the SELECT statement.
Example:
SELECT * FROM STUDENT WHERE StudentName = 'Alice';





// SQL Clauses and Commands
a. SELECT
Purpose: Retrieve data from one or more tables.
Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE condition;
Example:
SELECT StudentName, Email FROM STUDENT;


b. WHERE
Purpose: Filter records based on specific conditions.
Usage: Used with SELECT, UPDATE, DELETE.
Operators: =, >, <, >=, <=, <>, BETWEEN, LIKE, IN, AND, OR.
Example:
SELECT * FROM STUDENT WHERE Email LIKE '%@example.com';


c. ORDER BY
Purpose: Sort the result set.
Syntax:
SELECT column1, column2, ...
FROM table_name
ORDER BY column1 [ASC|DESC], column2 [ASC|DESC], ...;
Example:
SELECT StudentName, Email FROM STUDENT ORDER BY StudentName ASC;


d. GROUP BY
Purpose: Group rows that have the same values in specified columns.
Usage: Often used with aggregate functions (COUNT, SUM, AVG, MAX, MIN).
Syntax:
SELECT column1, aggregate_function(column2)
FROM table_name
GROUP BY column1;
Example:
SELECT SubjectId, COUNT(*) AS NumStudents
FROM MARKS
GROUP BY SubjectId;

e. HAVING
Purpose: Filter groups based on aggregate conditions.
Usage: Used with GROUP BY.
Syntax:
SELECT column1, aggregate_function(column2)
FROM table_name
GROUP BY column1
HAVING aggregate_function(column2) condition;
Example:
SELECT SubjectId, AVG(Mark) AS AverageMark
FROM MARKS
GROUP BY SubjectId
HAVING AVG(Mark) > 80;





// SQL Data Manipulation Commands
a. INSERT INTO
Purpose: Add new records to a table.
Syntax:
INSERT INTO table_name (column1, column2, ...)
VALUES (value1, value2, ...);
Example:
INSERT INTO SUBJECT (SubjectName, SubjectCode) VALUES ('Biology', 'BIO101');

b. UPDATE
Purpose: Modify existing records in a table.
Syntax:
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
Example:
UPDATE STUDENT
SET Email = 'alice_new@example.com'
WHERE StudentId = 1;

c. DELETE
Purpose: Remove records from a table.
Syntax:
DELETE FROM table_name
WHERE condition;
Example:
DELETE FROM MARKS WHERE Mark < 50;

d. TRUNCATE
Purpose: Remove all records from a table quickly and reset identity counters.
Syntax:
TRUNCATE TABLE table_name;
Characteristics:
Cannot be rolled back in some databases.
Resets table to empty state.
Faster than DELETE as it doesn't log individual row deletions.
Example:
TRUNCATE TABLE MARKS;




// Types of SQL Joins
Joins are used to combine rows from two or more tables based on related columns.

a. INNER JOIN
Purpose: Returns records that have matching values in both tables.
Syntax:
SELECT columns
FROM table1
INNER JOIN table2 ON table1.column = table2.column;
Example:
SELECT student.StudentName, marks.Mark
FROM STUDENT
INNER JOIN MARKS ON STUDENT.StudentId = MARKS.StudentId;

b. LEFT (OUTER) JOIN
Purpose: Returns all records from the left table and matched records from the right table. Unmatched right records are NULL.
Syntax:
SELECT columns
FROM table1
LEFT JOIN table2 ON table1.column = table2.column;
Example:
SELECT student.StudentName, marks.Mark
FROM STUDENT
LEFT JOIN MARKS ON STUDENT.StudentId = MARKS.StudentId;

c. RIGHT (OUTER) JOIN
Purpose: Returns all records from the right table and matched records from the left table. Unmatched left records are NULL.
Syntax:
SELECT columns
FROM table1
RIGHT JOIN table2 ON table1.column = table2.column;
Example:
SELECT marks.Mark, student.StudentName
FROM MARKS
RIGHT JOIN STUDENT ON MARKS.StudentId = STUDENT.StudentId;

d. FULL (OUTER) JOIN
Purpose: Returns all records when there is a match in either left or right table. Unmatched records are NULL.
Syntax:
SELECT columns
FROM table1
FULL OUTER JOIN table2 ON table1.column = table2.column;
Example:
SELECT student.StudentName, marks.Mark
FROM STUDENT
FULL OUTER JOIN MARKS ON STUDENT.StudentId = MARKS.StudentId;

e. CROSS JOIN
Purpose: Returns the Cartesian product of both tables (all possible combinations).
Syntax:
SELECT columns
FROM table1
CROSS JOIN table2;
Example:
SELECT student.StudentName, subject.SubjectName
FROM STUDENT
CROSS JOIN SUBJECT;

f. SELF JOIN
Purpose: Join a table to itself.
Usage: Useful for hierarchical data or comparing rows within the same table.
Example:
SELECT A.StudentName AS Student1, B.StudentName AS Student2
FROM STUDENT A
INNER JOIN STUDENT B ON A.StudentId <> B.StudentId;



// Aggregate Functions
Aggregate functions perform calculations on a set of values and return a single value.

Common Aggregate Functions
COUNT(): Returns the number of rows.
SUM(): Returns the total sum of a numeric column.
AVG(): Returns the average value of a numeric column.
SELECT AVG(Mark) FROM MARKS;
MAX(): Returns the highest value in a column.
MIN(): Returns the lowest value in a column.
Usage with GROUP BY
Aggregate functions are often used with GROUP BY to perform calculations on each group.

Example:
SELECT SubjectId, AVG(Mark) AS AverageMark
FROM MARKS
GROUP BY SubjectId;



// Transactions
A transaction is a sequence of one or more SQL operations treated as a single unit to ensure data integrity.

ACID Properties
Atomicity: Ensures all operations within the transaction are completed; if not, the transaction is aborted.
Consistency: Ensures the database remains in a valid state before and after the transaction.
Isolation: Ensures transactions are isolated from each other until they are completed.
Durability: Ensures that once a transaction is committed, it remains so, even in the event of a system failure.

Transaction Control Commands

a. COMMIT
Purpose: Saves all changes made in the current transaction.
Usage:
COMMIT;
Example:
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'newemail@example.com' WHERE StudentId = 1;
COMMIT;

b. ROLLBACK
Purpose: Undoes all changes made in the current transaction.
Usage:
ROLLBACK;
Example:
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'invalid_email' WHERE StudentId = 1;
    -- Suppose an error occurs here
ROLLBACK;

c. SAVEPOINT
Purpose: Sets a point within a transaction to which you can later roll back.
Usage:
SAVEPOINT savepoint_name;
Example:
BEGIN TRANSACTION;
    UPDATE STUDENT SET Email = 'alice@example.com' WHERE StudentId = 1;
    SAVEPOINT sp1;
    UPDATE STUDENT SET Email = 'alice_new@example.com' WHERE StudentId = 1;
    -- If needed, rollback to sp1
    ROLLBACK TO SAVEPOINT sp1;
COMMIT;

d. CHECKPOINT
Purpose: Saves all dirty pages (modified data not yet written to disk) to disk. This is more relevant to database administration and ensures recovery consistency.
Usage:
CHECKPOINT;



// Stored Procedures, Functions, and Triggers

a. Stored Procedures
Purpose: Precompiled collections of SQL statements stored in the database for reuse.
Benefits:
Encapsulate complex operations.
Enhance performance through precompilation.
Promote code reuse and maintainability.
Improve security by controlling access to data.

Syntax:
CREATE PROCEDURE procedure_name
AS
BEGIN
    SQL statements
END;

Example:
CREATE PROCEDURE GetStudentMarks
    @StudentId INT
AS
BEGIN
    SELECT SubjectName, Mark
    FROM MARKS
    INNER JOIN SUBJECT ON MARKS.SubjectId = SUBJECT.SubjectId
    WHERE StudentId = @StudentId;
END;

b. Functions
Purpose: Similar to stored procedures but return a single value or a table and can be used within SQL statements.
Types:
Scalar Functions: Return a single value.
Table-Valued Functions: Return a table.

Syntax:
CREATE FUNCTION function_name (@param datatype, ...)
RETURNS return_datatype
AS
BEGIN
    -- Function body
    RETURN value;
END;

Example (Scalar Function):
CREATE FUNCTION GetStudentEmail (@StudentId INT)
RETURNS VARCHAR(50)
AS
BEGIN
    DECLARE @Email VARCHAR(50);
    SELECT @Email = Email FROM STUDENT WHERE StudentId = @StudentId;
    RETURN @Email;
END;

Example (Table-Valued Function):
CREATE FUNCTION GetMarksByStudent (@StudentId INT)
RETURNS TABLE
AS
RETURN
(
    SELECT SubjectName, Mark
    FROM MARKS
    INNER JOIN SUBJECT ON MARKS.SubjectId = SUBJECT.SubjectId
    WHERE StudentId = @StudentId
);

c. Triggers
Purpose: Automatically execute predefined actions in response to certain events on a table or view.
Types:
DML Triggers: Respond to INSERT, UPDATE, DELETE operations.
DDL Triggers: Respond to DDL events like CREATE, ALTER, DROP.
Logon Triggers: Respond to user logins.

Syntax:
CREATE TRIGGER trigger_name
ON table_name
{ AFTER | INSTEAD OF } { INSERT, UPDATE, DELETE }
AS
BEGIN
    -- Trigger actions
END;

Example (DML Trigger):
CREATE TRIGGER trgAfterInsertStudent
ON STUDENT
AFTER INSERT
AS
BEGIN
    PRINT 'A new student record has been inserted.';
END;




// Types of Triggers
i. BEFORE Triggers
Note: Not supported in all RDBMS (e.g., MySQL supports them, SQL Server does not; instead, SQL Server uses INSTEAD OF triggers).
Purpose: Execute actions before the triggering event occurs.
Use Cases: Validate data before insertion or modification.

ii. AFTER Triggers
Purpose: Execute actions after the triggering event occurs.
Use Cases: Logging changes, enforcing business rules.

iii. INSTEAD OF Triggers
Purpose: Execute actions instead of the triggering event.
Use Cases: Modify behavior of INSERT, UPDATE, DELETE operations on views.

iv. DDL Triggers
Purpose: Respond to DDL events like CREATE, ALTER, DROP.
Use Cases: Audit schema changes, enforce policies.

v. Logon Triggers
Purpose: Execute actions in response to user logins.
Use Cases: Control user access, auditing.




// Views and Their Limitations

a. Views
Purpose: Virtual tables representing the result of a stored SELECT query. They simplify complex queries, enhance security, and provide a layer of abstraction.
Benefits:
Simplify data access by encapsulating complex joins and queries.
Enhance security by restricting access to specific data.
Provide a consistent, stable interface to underlying data.

Syntax:
CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table1
JOIN table2 ON table1.column = table2.column
WHERE condition;

Example:
CREATE VIEW StudentMarks AS
SELECT student.StudentName, subject.SubjectName, marks.Mark
FROM STUDENT
INNER JOIN MARKS ON STUDENT.StudentId = MARKS.StudentId
INNER JOIN SUBJECT ON MARKS.SubjectId = SUBJECT.SubjectId;


b. Limitations of Views
Performance Overhead:

Views can introduce performance overhead, especially if they involve complex joins or aggregations, as they are computed on-the-fly.
Non-Updatable Views:

Some views, especially those with joins, aggregations, or distinct clauses, are read-only and cannot be used to insert, update, or delete data.
Example: A view with GROUP BY cannot be updated directly.
Dependency Management:

Changes to underlying tables (like altering column names or data types) can break views, requiring them to be updated accordingly.
Limited Indexing:

While some RDBMS allow indexed views, not all views can be indexed, limiting performance optimization opportunities.
Security Risks:

Although views can enhance security by restricting data access, improper use can expose sensitive information if not carefully designed.
Complexity with Nested Views:

Creating views based on other views (nested views) can lead to maintenance challenges and performance issues.
Lack of Procedural Logic:

Views are limited to what can be expressed in a SELECT statement and cannot include procedural logic like loops or conditional statements.
No Support for Certain SQL Features:

Some SQL features (like variables or certain functions) may not be supported within view definitions.
c. Best Practices for Using Views
Simplify User Queries: Use views to present a simplified interface to complex data structures.
Security: Restrict access to sensitive columns by exposing only necessary data through views.
Naming Conventions: Adopt clear and consistent naming conventions for views to indicate their purpose.
Avoid Over-Nesting: Limit the use of nested views to reduce complexity and improve performance.




// Normalization
Normalization is a systematic approach of organizing data in a database to minimize redundancy and dependency. 
 Normal Forms
Normalization is achieved through a series of steps known as Normal Forms (NFs). Each normal form builds upon the previous one, addressing specific types of anomalies and dependencies.
Steps to Normalize a Database
Ensure 1NF:

Eliminate repeating groups.
Ensure all attributes are atomic.
Achieve 2NF:

Remove partial dependencies.
Ensure that non-key attributes depend on the entire primary key.
Achieve 3NF:

Remove transitive dependencies.
Ensure that non-key attributes do not depend on other non-key attributes.
Achieve BCNF:

Address any remaining anomalies by ensuring every determinant is a super key.
Proceed to Higher Normal Forms (4NF, 5NF):

Address multi-valued dependencies and complex relationships as needed.