// Arrays.
            
// Length: Property that gets the number of elements in the array.
int[] numbers = { 10, 20, 30, 40, 50 };
Console.WriteLine("Length of the array: " + numbers.Length); // Output: 5

// Indexing: Access or modify elements using indices.
int[] numbers1 = { 10, 20, 30, 40, 50 };
Console.WriteLine("First element: " + numbers[0]); // Output: 10
numbers1[2] = 35;
Console.WriteLine("Modified third element: " + numbers1[2]);

// Copy: Methods like Array.Copy to copy elements from one array to another.
int[] sourceArray = { 1, 2, 3, 4, 5 };
int[] destinationArray = new int[sourceArray.Length];
Array.Copy(sourceArray, destinationArray, sourceArray.Length);
Console.WriteLine("Destination array elements:");
foreach (var num in destinationArray)
{
    Console.WriteLine(num); // Output: 1, 2, 3, 4, 5
}

// Sort: Array.Sort to sort the elements.
int[] numbers2 = { 50, 30, 20, 40, 10 };
Array.Sort(numbers2);
Console.WriteLine("Sorted array:");
foreach (var num in numbers2)
{
    Console.WriteLine(num); // Output: 10, 20, 30, 40, 50
}


// List.

// Add(T item): Adds a single element to the end of the list.
List<string> fruits = new List<string>();
fruits.Add("Apple");
fruits.Add("Banana");
fruits.Add("Cherry");
Console.WriteLine("After Add:");
foreach (var fruit in fruits)
{
    Console.WriteLine(fruit);
}                                 //output: // Apple
 	    				           // Banana
          				           // Cherry



// AddRange(IEnumerable < T > collection): Adds multiple elements to the end of the list.
List<int> numbers3 = new List<int>();
numbers3.Add(1);
numbers3.Add(2);
List<int> moreNumbers = new List<int> { 3, 4, 5 };
numbers3.AddRange(moreNumbers);
Console.WriteLine("After AddRange:");
foreach (var number in numbers3)
{
    Console.WriteLine(number);
}// Output:

// 1
// 2
// 3
// 4
// 5

// Remove(T item): Removes the first occurrence of a specific object from the list.
List<string> fruits1 = new List<string> { "Apple", "Banana", "Cherry", "Banana" };
bool removed = fruits1.Remove("Banana");
Console.WriteLine("After Remove:");
foreach (var fruit in fruits1)
{
    Console.WriteLine(fruit);
}// Output: // Apple
 	     // Cherry
 	     // Banana
 Console.WriteLine("Was 'Banana' removed? " + removed); // True


// RemoveAt(int index): Removes the element at the specified index.
List<int> numbers4 = new List<int> { 10, 20, 30, 40, 50 };
numbers4.RemoveAt(2);
Console.WriteLine("After RemoveAt:");
foreach (var number in numbers4)
{
    Console.WriteLine(number);
} // Output:
  // 10
  // 20
  // 40
  // 50



// Count: Property that gets the number of elements in the list.
List<char> letters = new List<char> { 'A', 'B', 'C', 'D' };
int count = letters.Count;
Console.WriteLine("Number of elements in the list: " + count); // Output: 4


// Clear(): Removes all elements from the list.
List<string> fruits2 = new List<string> { "Apple", "Banana", "Cherry" };
fruits2.Clear();
Console.WriteLine("List Count after Clear: " + fruits2.Count); // Output: 0


// Contains(T item): Checks if the list contains a specific element.
List<int> numbersA = new List<int> { 5, 10, 15, 20 };
bool hasTen = numbersA.Contains(10);
bool hasTwentyFive = numbersA.Contains(25);
Console.WriteLine("List contains 10: " + hasTen);         // True
Console.WriteLine("List contains 25: " + hasTwentyFive); // False



// Dictionaries.	

// Add(TKey key, TValue value): Adds a key - value pair to the dictionary.
Dictionary<string, int> ageDictionary = new Dictionary<string, int>();
ageDictionary.Add("Alice", 30);
ageDictionary.Add("Bob", 25);
ageDictionary.Add("Charlie", 35);

foreach (var entry in ageDictionary)
{
    Console.WriteLine($"{entry.Key}: {entry.Value}");
} // Output:
  // Alice: 30
  // Bob: 25
  // Charlie: 35

// Remove(TKey key): Removes the element with the specified key.
Dictionary<string, int> ageDictionary1 = new Dictionary<string, int>
{
        { "Alice", 30 },
        { "Bob", 25 },
        { "Charlie", 35 }
};
ageDictionary1.Remove("Bob");
foreach (var entry in ageDictionary1)
{
    Console.WriteLine($"{entry.Key}: {entry.Value}");
}// Output:
 // Alice: 30
 // Charlie: 35


// ContainsKey(TKey key): Checks if a key exists in the dictionary.
Dictionary<string, int> ageDictionary3 = new Dictionary<string, int>
{
    { "Alice", 30 },
    { "Bob", 25 }
};
bool hasAlice = ageDictionary3.ContainsKey("Alice");
bool hasCharlie = ageDictionary3.ContainsKey("Charlie");
Console.WriteLine("Contains Alice: " + hasAlice);
Console.WriteLine("Contains Charlie: " + hasCharlie);// Output:
                                                     // Contains Alice: True
                                                     // Contains Charlie: False


// TryGetValue(TKey key, out TValue value): Tries to get the value associated with the specified key.
Dictionary<string, int> ageDictionary4 = new Dictionary<string, int>
{
    { "Alice", 30 },
    { "Bob", 25 }
};
if (ageDictionary4.TryGetValue("Bob", out int bobAge))
{
    Console.WriteLine("Bob's age: " + bobAge);
}
else
{
    Console.WriteLine("Bob not found.");
}// Output:
 // Bob's age: 25
 // Charlie not found.



// Count: Property that gets the number of key - value pairs.
Dictionary<string, int> ageDictionary5 = new Dictionary<string, int>
{
    { "Alice", 30 },
    { "Bob", 25 }
};
int count1 = ageDictionary5.Count;
Console.WriteLine("Number of key-value pairs: " + count1);// Output:
                                                          // Number of key-value pairs: 2

// Keys: Property that gets a collection containing all the keys.
Dictionary<string, int> ageDictionary6 = new Dictionary<string, int>
{
    { "Alice", 30 },
    { "Bob", 25 }
};
var keys = ageDictionary6.Keys;
Console.WriteLine("Keys in the dictionary:");
foreach (var key in keys)
{
    Console.WriteLine(key);
}// Output:
 // Keys in the dictionary:
 // Alice
 // Bob


// Values: Property that gets a collection containing all the values.
Dictionary<string, int> ageDictionary7 = new Dictionary<string, int>
{
    { "Alice", 30 },
    { "Bob", 25 }
};
var values = ageDictionary7.Values;
Console.WriteLine("Values in the dictionary:");
foreach (var value in values)
{
    Console.WriteLine(value);
}// Output:
 // Values in the dictionary:
 // 30
 // 25
